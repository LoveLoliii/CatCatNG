@using CatCatNG.vo;
@using Microsoft.Fast.Components.FluentUI
@using Newtonsoft.Json;

<FluentGrid Justify="JustifyContent.FlexStart" Spacing="3" Style="background-color: var(--neutral-layer-3);height: 100vh; width: 100vw;overflow: hidden;">

     
    
    <FluentGridItem xs="18" sm="9" Style="height:100vh;width:100vw">
        <FluentGrid Spacing="1" Justify="JustifyContent.Center">
            <FluentGridItem xs="12" Justify="JustifyContent.Center" Style="height:50vh">
                <div class="card" style="border:dotted 0px; display:flex;flex-direction:column-reverse">
                    <FluentTextField Label="" @bind-Value="inputValue"/>
                   
                </div>
            </FluentGridItem>
            <FluentGridItem xs="12" Justify="JustifyContent.Center" Style="height:50vh">
                <div class="card" style="border:dotted 0px;">
                    <FluentIcon  Icon="Icons.Regular.Size48.PlayCircle" OnClick="checkRoomId"/>
                </div>
                <div>
                    <FluentDialog @ref="_myFluentDialog" @bind-Hidden="@Hidden" aria-label="Simple dialog" Modal=@_modal TrapFocus=@_trapFocus PreventScroll=@_preventScroll @ondialogdismiss=OnDismiss>
                        <FluentDialogHeader Visible="false" />
                        <h2>扫码登录</h2>
                        <p>@responseText</p>
                        <img src=@qrUrl  width="200" height="200" />
                       
                        <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="OnClose">关闭</FluentButton>

                    </FluentDialog>

                </div>
            </FluentGridItem>
            </FluentGrid>
    </FluentGridItem>
        
</FluentGrid>



@code {
    private string inputValue = "";
    private string responseText = "loading・・・・・・";
    private string qrUrl = "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=123456";

    private FluentDialog? _myFluentDialog;
    private bool _trapFocus = true;
    private bool _modal = true;
    private bool _preventScroll = true;
    private string? _status;
    private bool Hidden { get; set; } = true;



    private async Task checkRoomId()
    {
        if (!IsNumeric(inputValue))
        {
            await OnOpen();
            inputValue = string.Empty;
        }
    }

    private bool IsNumeric(string input)
    {
        return double.TryParse(input, out _);
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            _myFluentDialog!.Hide();
    }

    private async Task OnOpen()
    {
        _status = "Dialog opened with button click";
        await MakeGetRequest();
        _myFluentDialog!.Show();
        System.Diagnostics.Debug.WriteLine(_status);
    }

    private void OnClose()
    {
        _status = $"Dialog dismissed with reason: Close button clicked";
        _myFluentDialog!.Hide();
        System.Diagnostics.Debug.WriteLine(_status);
    }

    private void OnDismiss(DialogEventArgs args)
    {
        if (args is not null && args.Reason is not null && args.Reason == "dismiss")
        {
            _status = $"Dialog dismissed with reason: Dismissed";
            _myFluentDialog!.Hide();
            System.Diagnostics.Debug.WriteLine(_status);
        }
    }
    private HttpClient httpClient = new HttpClient();
    private async Task MakeGetRequest()
    {
        try
        {
            // 发起 HTTP GET 请求
            // 设置 Referer 头
            httpClient.DefaultRequestHeaders.Referrer = new Uri("https://live.bilibili.com");
            HttpResponseMessage response = await httpClient.GetAsync("https://passport.bilibili.com/qrcode/getLoginUrl");

            if (response.IsSuccessStatusCode)
            {
                // 如果响应成功，读取响应内容
                responseText = await response.Content.ReadAsStringAsync();
                BilibiliHttpResponse msg = JsonConvert.DeserializeObject<BilibiliHttpResponse>(responseText);
                BilibiliLoginResponseData loginResponse =  msg.Data;
                this.qrUrl = loginResponse.Url;
                checkQrLogin(loginResponse);
            }
            else
            {
                responseText = "Error: " + response.StatusCode;
            }
        }
        catch (Exception ex)
        {
            responseText = "Error: " + ex.Message;
        }
    }
    protected void checkQrLogin(BilibiliLoginResponseData loginResponseData)
    {
        
    }
}